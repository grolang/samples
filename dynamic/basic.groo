#!gro
import "github.com/grolang/gro/ops"
var v int; const c = 2; type t int

{
	let _ = int(4) // 4 is an untyped constant

	let _, isType = (+4).(groo.Int)
	assert isType // +4 is 4 with the `groo.Identity` function applied

	var aa = 0x7000_0000_0000_0000

	let _, isType = (+aa).(groo.Int)
	assert isType //the `groo.Identity` unary function is applied

	let _, isType = (aa+aa).(groo.BigInt)
	assert isType //the `groo.Plus` binary function is applied
}

assert 1 + 3 == 4
assert 3 + 4 == 7
assert 9 - 2 == 7
assert 4 + 5 == 9

func retFloat()any{
	return 1.234
}

assert retFloat() == 1.234

assert 37/23 == 37/(20 + 3)

assert -0x80 == -0x40-0x40
assert 0xff == 0xff
assert 123456789 == 123 * 1_000_000 + 456 * 1000 + 789

assert 7 % 4 == 3
assert 1.2+3.4i == 1.2+3.4i

//boolean...
assert (
	(true && false) == false
	-true == false
	-false == true
	-nil == nil
)

//extra parens around entire expression to prevent parens being interpreted as assert group
assert ((true && false) == false)

assert (
	false + false == false // + acts like || but without lazy eval
	true + false == true
	false + true == true
	true + true == true
	false - false == true // a-b is short for a+(-b), which acts like (a || !b) but without lazy eval
)

assert (
	false * false == false // * acts like && but without lazy eval
	true * false == false
	false * true == false
	true * true == true
)

assert (
	1/nil == nil
	1/true == false
	1/false == true
)

assert (
	false / false == false
	true / false == true
	false / true == false
	true / true == false
)

//nil, 0, inf ...
assert (
	inf == inf
	1/0 == inf
	1/1 == 1
	0 == 0
	1/inf == 0
	nil/nil == nil
	0/0 == nil
	inf/inf == nil
)

assert (
	4 % 0 == inf
	4 % inf == 4

	0%0 == inf //should be nil
	inf%inf == inf //should be nil
)

//dates...
assert (
	2017.12.12 + 7 == 2017.12.19
	2017.12.12 + 7 != 2017.12.20
	2017.12.12 - 5 == 2017.12.7
	2017.12.12 - 5 == 2017.12.07
	7 + 2017.12.12 == 2017.12.19
	2017.12.12 > 2003.8.29
)

//pos int ranges...
assert (
	[0:5] == [0:5]
	[0:5] != [2:13]
	[0:5] != [0:13]
	[0:5] != [2:5]

	[:20] == [0:20]
	[12:] == [12:inf]
	[:] == [0:inf]
)

//codepoints...
assert "" + '\t'%"v" == "'\t'"
assert "" + '\t'%"v" == `'	'`
assert `'	'` == '\t'%"v"

//format strings...
assert ops.Sprf("Hey, you!") == "Hey, you!"
assert "Hello, " + "to"%"s " + "the"%"s " + "world"%"s!" == "Hello, to the world!"
assert "there are " + 6 % "d green bottles" == "there are 6 green bottles"

assert 123 % "5d has type %[1]T." == "  123 has type int64."
assert 123 % "5d has type %[1]T, and " + true % "t is true." ==
	"  123 has type int64, and true is true."

//regexes...
assert (
	'a'%"v" == "'a'"
	'ab'%"v" == "[ab]"
	("a" >> "a|b")%"v" == "{{{ 0 1 a}}}"
)

//regex repetition...
assert (
	([:] * 'a') % "v" == `a*` //range first in mult means greedy matching
	('a' * [:]) % "v" == `a*?` //range second in mult means reluctant matching
	([:] * "a") % "v" == `(?:\Qa\E)*`
	("a" * [:]) % "v" == `(?:\Qa\E)*?`
	([:] * 'a-z') % "v" == `[a-z]*`
	([:] * "abc") % "v" == `(?:\Qabc\E)*`
	([:] * ('a' | 'b')) % "v" == `[ab]*`
	([:] * ('a' | "bc")) % "v" == `(?:a|(?:\Qbc\E))*`
)

assert (
	([1:] * 'a') % "v" == `a+`
	('a' * [1:]) % "v" == `a+?`
	([:1] * 'a') % "v" == `a?`
	(3 * 'a') % "v" == `a{3}`
	('a' * 3) % "v" == `a{3}?`
	([3:5] * 'a') % "v" == `a{3,5}`
	([3:] * 'a') % "v" == `a{3,}`

	 !'a' % "v" == `[^a]`
	 !'2a-c' % "v" == `[^2a-c]`
	 !'^2a-c' % "v" == `[2a-c]`

	('a'|'b') % "v" == `[ab]`
	('a'|"fg") % "v" == `a|(?:\Qfg\E)`
	(!'a-e'|!'g-j') % "v" == `[^a-eg-j]`
)

do p:= ops.Spr
assert (
	('a' & 'b') %"v"== `ab`
	('a-e'&"fgh")%"v" == `[a-e]fgh`
	(('f'|'g')&('J'|'k'))%"v" == `[fg][Jk]`
	p(('f'|'g')&('J'|'k')) == `[fg][Jk]`
)

assert (
	+[]int{1,2,3} %"T" == "ops.Slice"; []int{1,2,3} %"T" == "ops.Slice"
	"ops.Slice" == []int{1,2,3}%"T"

	[]int{1,2,3} %"v" == "{1, 2, 3}"
	([]int{1,2,3} + []{"4", "5"}) %"v" == `{1, 2, 3, 4, 5}`
	([]int{1,2,3} << "456") %"v" == `{1, 2, 3, 456}`
	([]int{1,2,3} << []{"4", "5"}) %"v" == `{1, 2, 3, {4, 5}}`
)

assert (
	map[any]any{11:"Hey", 12:"Wow", 13:"Dude"} << [14:"Man"] ==
		ops.InitMap([11:"Hey"], [12:"Wow"], [13:"Dude"], [14:"Man"])

	map[any]any{11:"Hey", 12:"Wow", 13:"Dude"} << [14:"Man"] ==
		map[any]any{11:"Hey", 12:"Wow", 13:"Dude", 14:"Man"}
)

//unary reflect-operator
assert(
	7 % "v %[1]T" == "7 int64"
	|7 % "v %[1]T" == "7 reflect.Value"
	| |7  % "v %[1]T" == "7 int64"
)

{
	do a:= +[]any{11,12,13}
	do a <<= 14
	assert a%"v" == "{11, 12, 13, 14}"
}

{
	do a:= +[]any{11,12,13}
	do a = a << 14
	assert a%"v" == "{11, 12, 13, 14}"
}

{
	do a:= +[]any{"Hey", "Wow", "Pal", "Mate", "Dude"}
	assert a[2] %"v"== "Pal"
	assert a[2:4]%"v" == "{Pal, Mate}"
}

{
	do a:= "Hey there!"
	assert a[4] %"v" == "'t'" //TODO: fix codepoint formatting
	assert a[4] % "v %[1]T" == "'t' utf88.Codepoint"
	assert a[4:7] % "v" == "the"
}

{
	//workaround... //assert ("a" >> "a|b").([][]ops.RegexMatch)[0][0].Match % "v" == "a"
	do x:= ("a" >> "a|b")
	assert x[0][0].(ops.RegexMatch).Match % "v" == "a"
}

assert (
	("abc" * 3)%"v %[1]T" == `(?:\Qabc\E){3}? ops.Regex` //CHANGE TO: "abcabcabc utf88.Text"

)

assert(
	func{h:= "H"; I:="i"; h+I}()=="Hi"
	func{_*_}(3,4)%"d"=="12"
)

assert(
	("abc" >> 'a')%"v" == "{{{ 0 1 a}}}" //regex matches
	("bcd" >> 'a')%"v" == "{}"
)
{
	let letterA = func{'a'}
	assert "abc" >> letterA == 'a' //parsec matches
	assert "bcd" >> letterA == nil
}

{
	let letterA = func{func{'a'}}

	assert "abc" >> letterA == 'a' //#### FAIL: call >> on a func returning a func returning a codepoint
		//ToParser: invalid input type: func(...interface {}) interface {}

	assert "defg" >> letterA == nil
}

{
	var expr func(...any)any
	do paren := func{"(" &> func{expr} <& ')'} //#### call &> or <& on a func returning a func returning a Parser
	do expr = func{'a' | paren()} //#### call | on a Parser
	assert(
		"a" >> expr() == 'a'
		"(a)" >> expr() == 'a'
		"((a))" >> expr() == 'a'
	)
}

/*{
	var expr func(...any)any
	do paren := func{"(" &> func{expr} <& ')'}
	do expr = func{'a' | paren} //#### FAIL: call | on func returning a Parser
		//Alt: invalid input type
	assert(
		"a" >> expr() == 'a'
		"(a)" >> expr() == 'a'
		"((a))" >> expr() == 'a'
	)
}*/

{
	var expr func(...any)any
	do expr = func{'a' | ("(" &> func{expr} <& ')')}
	assert(
		"a" >> expr() == 'a' //#### call >> on a Parser
		"(a)" >> expr() == 'a'
		"((a))" >> expr() == 'a'
	)
}

/*{
	var expr func(...any)any
	do expr = func{'a' | ("(" &> expr <& ')')} //#### FAIL: infinite loop or recursion
	assert(
		"a" >> expr() == 'a'
		"(a)" >> expr() == 'a'
		"((a))" >> expr() == 'a'
	)
}*/

{
	var expr func(...any)any
	do expr = func{'a' | ("(" &> func{expr} <& ')')}
	assert(
		"a" >> expr == 'a' //#### call >> on a func returning a Parser
	)
}

{
	var expr func(...any)any
	do expr = func{'a' | [2:2]*("(" &> func{expr} <& ')')} //#### call * on a Parser
	assert(
		"aa" >> expr() == 'a' //#### call >> on a Parser
		"(a)(a)" >> expr() % "v" == "{'a', 'a'}"
		"((a)(a))((a)(a))" >> expr() % "v" == "{{'a', 'a'}, {'a', 'a'}}"
	)
}

/*{
	var expr func(...any)any
	do expr = func{'a' | [2:2]*func{"(" &> func{expr} <& ')'}} //#### FAIL: call * on func returning Parser
		//interface conversion: interface {} is parsec.Parser, not func(...interface {}) interface {}
		//Mult cases multiusePair and func(...interface{})interface{}
	assert(
		"aa" >> expr() == 'a'
	)
}*/

/*{
	let manyA= [3:3]*func{'a'} //#### FAIL: call * on func returning codepoint
		//interface conversion: interface {} is utf88.Codepoint, not func(...interface {}) interface {}
		//Mult cases multiusePair and func(...interface{})interface{}
	do ops.Pr("aaab">>manyA)
}*/



